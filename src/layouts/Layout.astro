---
import '@fontsource/inter';
import ThemeToggle from '../components/ThemeToggle.astro';
import Navigation from '../components/Navigation.astro';
import { ViewTransitions } from 'astro:transitions';
import { SonnerToast } from '../components/SonnerToast.jsx';
import ContactForm from '../components/ContactForm.astro';

interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { title, description = "Noé Júnior", image } = Astro.props;
const socialImage = image ? new URL(image, Astro.url.origin).href : new URL('/images/social.jpg', Astro.url.origin).href;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image" href="/favicon.jpg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <ViewTransitions />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={socialImage} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url.href} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImage} />
  </head>
  <body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 min-h-screen transition-colors duration-200 flex flex-col">
    <div class="max-w-4xl mx-auto px-4 py-8 flex-grow w-full">
      <header class="flex justify-between items-center mb-8">
        <Navigation />
        <ThemeToggle />
      </header>
      <main>
        <slot />
      </main>
      <div id="contact-form-container" class="fixed bottom-4 right-4 z-50">
        <button id="toggle-contact-form" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105">
          Contactar
        </button>
        <div id="contact-form-wrapper" class="hidden fixed bottom-16 right-4 z-50">
          <ContactForm />
        </div>
      </div>
    </div>
    <footer class="text-center py-4 mt-8">
      <p>&copy; 2025 Noé Júnior. Todos os direitos reservados.</p>
    </footer>
    <SonnerToast client:load />
    <script type="module" src="/global.js"></script>
    <script is:inline>
      // Global state management
      window.contactFormState = {
        isOpen: false,
        initialized: false
      };

      function initializeContactForm() {
        const toggleButton = document.getElementById('toggle-contact-form');
        const formWrapper = document.getElementById('contact-form-wrapper');
        
        if (!toggleButton || !formWrapper) {
          console.log('Contact form elements not found');
          return;
        }

        // Remove existing listeners to prevent duplicates
        const newToggleButton = toggleButton.cloneNode(true);
        toggleButton.parentNode.replaceChild(newToggleButton, toggleButton);
        
        function updateUI() {
          const currentFormWrapper = document.getElementById('contact-form-wrapper');
          const currentToggleButton = document.getElementById('toggle-contact-form');
          
          if (!currentFormWrapper || !currentToggleButton) return;
          
          if (window.contactFormState.isOpen) {
            currentFormWrapper.classList.remove('hidden');
            currentToggleButton.textContent = 'Fechar';
            currentToggleButton.classList.add('bg-red-500', 'hover:bg-red-600');
            currentToggleButton.classList.remove('bg-blue-500', 'hover:bg-blue-600');
          } else {
            currentFormWrapper.classList.add('hidden');
            currentToggleButton.textContent = 'Contactar';
            currentToggleButton.classList.add('bg-blue-500', 'hover:bg-blue-600');
            currentToggleButton.classList.remove('bg-red-500', 'hover:bg-red-600');
          }
        }
        
        newToggleButton.addEventListener('click', (e) => {
          e.preventDefault();
          window.contactFormState.isOpen = !window.contactFormState.isOpen;
          updateUI();
        });
        
        // Initialize UI
        updateUI();
        window.contactFormState.initialized = true;
        
        console.log('Contact form initialized');
      }

      function initializeTheme() {
        const toggleButton = document.getElementById('theme-toggle');
        if (!toggleButton) return;

        // Remove existing listeners
        const newToggleButton = toggleButton.cloneNode(true);
        toggleButton.parentNode.replaceChild(newToggleButton, toggleButton);

        let currentTheme = localStorage.getItem('theme');
        if (!currentTheme) {
          currentTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
          localStorage.setItem('theme', currentTheme);
        }

        function applyTheme(theme) {
          if (theme === 'dark') {
            document.documentElement.classList.add('dark');
          } else {
            document.documentElement.classList.remove('dark');
          }
          localStorage.setItem('theme', theme);
        }

        applyTheme(currentTheme);

        newToggleButton.addEventListener('click', () => {
          currentTheme = currentTheme === 'dark' ? 'light' : 'dark';
          applyTheme(currentTheme);
        });

        console.log('Theme initialized:', currentTheme);
      }

      function initializeAll() {
        console.log('Initializing all components...');
        initializeContactForm();
        initializeTheme();
      }

      // Initialize on DOM ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeAll);
      } else {
        initializeAll();
      }

      // Re-initialize on Astro page transitions
      document.addEventListener('astro:after-swap', () => {
        console.log('Astro page transition detected, re-initializing...');
        setTimeout(initializeAll, 100); // Small delay to ensure DOM is ready
      });

      // Also listen for page load events
      document.addEventListener('astro:page-load', () => {
        console.log('Astro page load detected, re-initializing...');
        setTimeout(initializeAll, 100);
      });
    </script>
  </body>
</html>

<style is:global>
  :root {
    --font-size-base: 16px;
    --color-text: #1a1a1a;
    --color-bg: #ffffff;
  }

  :root.dark {
    --color-text: #ffffff;
    --color-bg: #1a1a1a;
  }

  html {
    font-family: 'Inter', sans-serif;
    font-size: var(--font-size-base);
  }

  body {
    background-color: var(--color-bg);
    color: var(--color-text);
  }

  .transition-colors {
    transition-property: background-color, border-color, color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 200ms;
  }
</style>
