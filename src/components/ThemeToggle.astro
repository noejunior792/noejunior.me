---
---

<button
  id="theme-toggle"
  class="p-2 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-200"
  aria-label="Toggle theme"
>
  <svg
    id="sun-icon"
    xmlns="http://www.w3.org/2000/svg"
    class="h-5 w-5 text-gray-800 dark:text-gray-200"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
    />
  </svg>
  <svg
    id="moon-icon"
    xmlns="http://www.w3.org/2000/svg"
    class="h-5 w-5 text-gray-800 dark:text-gray-200 hidden"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
    />
  </svg>
</button>

<script is:inline>
  // Global theme state
  window.themeState = window.themeState || {
    current: null,
    initialized: false
  };

  function initTheme() {
    const toggleButton = document.getElementById('theme-toggle');
    const sunIcon = document.getElementById('sun-icon');
    const moonIcon = document.getElementById('moon-icon');

    if (!toggleButton || !sunIcon || !moonIcon) {
      console.log('Theme elements not found');
      return;
    }

    // Remove existing event listeners by cloning the button
    const newToggleButton = toggleButton.cloneNode(true);
    toggleButton.parentNode.replaceChild(newToggleButton, toggleButton);

    // Get current theme from global state or localStorage
    let currentTheme = window.themeState.current || localStorage.getItem('theme');
    if (!currentTheme) {
      currentTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      localStorage.setItem('theme', currentTheme);
    }

    // Update global state
    window.themeState.current = currentTheme;

    function updateIcons(theme) {
      const currentSunIcon = document.getElementById('sun-icon');
      const currentMoonIcon = document.getElementById('moon-icon');
      
      if (!currentSunIcon || !currentMoonIcon) return;
      
      if (theme === 'dark') {
        currentSunIcon.classList.add('hidden');
        currentMoonIcon.classList.remove('hidden');
      } else {
        currentSunIcon.classList.remove('hidden');
        currentMoonIcon.classList.add('hidden');
      }
    }

    function applyTheme(theme) {
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
      localStorage.setItem('theme', theme);
      window.themeState.current = theme;
      updateIcons(theme);
    }

    // Apply initial theme
    applyTheme(currentTheme);

    // Add click listener to new button
    const finalToggleButton = document.getElementById('theme-toggle');
    if (finalToggleButton) {
      finalToggleButton.addEventListener('click', (e) => {
        e.preventDefault();
        const newTheme = window.themeState.current === 'dark' ? 'light' : 'dark';
        applyTheme(newTheme);
      });
    }

    window.themeState.initialized = true;
    console.log('Theme initialized:', currentTheme);
  }

  // Initialize immediately if DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTheme);
  } else {
    // Small delay to ensure all elements are in DOM
    setTimeout(initTheme, 50);
  }

  // Re-initialize on Astro transitions
  document.addEventListener('astro:after-swap', () => {
    console.log('Theme: Re-initializing after Astro transition');
    setTimeout(initTheme, 100);
  });

  document.addEventListener('astro:page-load', () => {
    console.log('Theme: Re-initializing after page load');
    setTimeout(initTheme, 100);
  });
</script>