---
interface Props {
  src: string;
  alt: string;
  class?: string;
}

const { src, alt, class: className = '' } = Astro.props;
---

<div class={`relative overflow-hidden rounded-lg ${className}`}>
  <img
    src={src}
    alt={alt}
    class="w-full h-auto hover:scale-105 transition-transform duration-300 ease-in-out"
    loading="lazy"
    decoding="async"
    style="opacity: 0; transition: opacity 0.3s ease-in-out;"
    onload="this.style.opacity = 1;"
  />
  <div class="absolute inset-0 bg-gray-200 dark:bg-gray-700 animate-pulse gallery-placeholder"></div>
</div>

<style>
  .gallery-placeholder {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }
  
  :global(.dark) .gallery-placeholder {
    background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);
    background-size: 200% 100%;
  }
  
  @keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }
  
  img[style*="opacity: 1"] + .gallery-placeholder {
    display: none;
  }
</style>

<script>
  // Improved lazy loading with intersection observer
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          if (img.dataset.src) {
            img.src = img.dataset.src;
            img.removeAttribute('data-src');
            observer.unobserve(img);
          }
        }
      });
    }, {
      rootMargin: '50px 0px',
      threshold: 0.01
    });

    document.querySelectorAll('img[data-src]').forEach(img => {
      imageObserver.observe(img);
    });
  }
</script>
